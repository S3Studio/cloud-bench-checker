// Code generated by go-swagger; DO NOT EDIT.

package server_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Cloudtype4api cloudtype4api
//
// swagger:model cloudtype4api
type Cloudtype4api string

func NewCloudtype4api(value Cloudtype4api) *Cloudtype4api {
	return &value
}

// Pointer returns a pointer to a freshly-allocated Cloudtype4api.
func (m Cloudtype4api) Pointer() *Cloudtype4api {
	return &m
}

const (

	// Cloudtype4apiTencentCloud captures enum value "tencent_cloud"
	Cloudtype4apiTencentCloud Cloudtype4api = "tencent_cloud"

	// Cloudtype4apiTencentCos captures enum value "tencent_cos"
	Cloudtype4apiTencentCos Cloudtype4api = "tencent_cos"

	// Cloudtype4apiAliyun captures enum value "aliyun"
	Cloudtype4apiAliyun Cloudtype4api = "aliyun"

	// Cloudtype4apiAliyunOss captures enum value "aliyun_oss"
	Cloudtype4apiAliyunOss Cloudtype4api = "aliyun_oss"

	// Cloudtype4apiK8s captures enum value "k8s"
	Cloudtype4apiK8s Cloudtype4api = "k8s"

	// Cloudtype4apiAzure captures enum value "azure"
	Cloudtype4apiAzure Cloudtype4api = "azure"
)

// for schema
var cloudtype4apiEnum []interface{}

func init() {
	var res []Cloudtype4api
	if err := json.Unmarshal([]byte(`["tencent_cloud","tencent_cos","aliyun","aliyun_oss","k8s","azure"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudtype4apiEnum = append(cloudtype4apiEnum, v)
	}
}

func (m Cloudtype4api) validateCloudtype4apiEnum(path, location string, value Cloudtype4api) error {
	if err := validate.EnumCase(path, location, value, cloudtype4apiEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this cloudtype4api
func (m Cloudtype4api) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCloudtype4apiEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this cloudtype4api based on context it is used
func (m Cloudtype4api) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
