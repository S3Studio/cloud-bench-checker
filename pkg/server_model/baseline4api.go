// Code generated by go-swagger; DO NOT EDIT.

package server_model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Baseline4api baseline4api
//
// swagger:model baseline4api
type Baseline4api struct {

	// checker
	Checker []*Checker4api `json:"checker"`

	// hash
	Hash *ItemHash `json:"hash,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// metadata
	Metadata map[string]string `json:"metadata,omitempty"`

	// tag
	Tag []string `json:"tag"`

	// yaml
	Yaml string `json:"yaml,omitempty"`

	// yaml hidden
	YamlHidden bool `json:"yaml_hidden"`
}

// Validate validates this baseline4api
func (m *Baseline4api) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChecker(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHash(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Baseline4api) validateChecker(formats strfmt.Registry) error {
	if swag.IsZero(m.Checker) { // not required
		return nil
	}

	for i := 0; i < len(m.Checker); i++ {
		if swag.IsZero(m.Checker[i]) { // not required
			continue
		}

		if m.Checker[i] != nil {
			if err := m.Checker[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("checker" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("checker" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Baseline4api) validateHash(formats strfmt.Registry) error {
	if swag.IsZero(m.Hash) { // not required
		return nil
	}

	if m.Hash != nil {
		if err := m.Hash.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hash")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this baseline4api based on the context it is used
func (m *Baseline4api) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateChecker(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Baseline4api) contextValidateChecker(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Checker); i++ {

		if m.Checker[i] != nil {

			if swag.IsZero(m.Checker[i]) { // not required
				return nil
			}

			if err := m.Checker[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("checker" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("checker" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Baseline4api) contextValidateHash(ctx context.Context, formats strfmt.Registry) error {

	if m.Hash != nil {

		if swag.IsZero(m.Hash) { // not required
			return nil
		}

		if err := m.Hash.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hash")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Baseline4api) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Baseline4api) UnmarshalBinary(b []byte) error {
	var res Baseline4api
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
