// Code generated by go-swagger; DO NOT EDIT.

package baseline

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/s3studio/cloud-bench-checker/pkg/server_model"
)

// GetBaselineGetDefinitionHandlerFunc turns a function with the right signature into a get baseline get definition handler
type GetBaselineGetDefinitionHandlerFunc func(GetBaselineGetDefinitionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetBaselineGetDefinitionHandlerFunc) Handle(params GetBaselineGetDefinitionParams) middleware.Responder {
	return fn(params)
}

// GetBaselineGetDefinitionHandler interface for that can handle valid get baseline get definition params
type GetBaselineGetDefinitionHandler interface {
	Handle(GetBaselineGetDefinitionParams) middleware.Responder
}

// NewGetBaselineGetDefinition creates a new http.Handler for the get baseline get definition operation
func NewGetBaselineGetDefinition(ctx *middleware.Context, handler GetBaselineGetDefinitionHandler) *GetBaselineGetDefinition {
	return &GetBaselineGetDefinition{Context: ctx, Handler: handler}
}

/*
	GetBaselineGetDefinition swagger:route GET /baseline/getDefinition baseline getBaselineGetDefinition

Get definition of a Baseline
*/
type GetBaselineGetDefinition struct {
	Context *middleware.Context
	Handler GetBaselineGetDefinitionHandler
}

func (o *GetBaselineGetDefinition) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetBaselineGetDefinitionParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetBaselineGetDefinitionOKBody get baseline get definition o k body
//
// swagger:model GetBaselineGetDefinitionOKBody
type GetBaselineGetDefinitionOKBody struct {

	// code
	Code int64 `json:"code,omitempty"`

	// data
	Data *server_model.Baseline4api `json:"data,omitempty"`

	// msg
	Msg string `json:"msg,omitempty"`
}

// Validate validates this get baseline get definition o k body
func (o *GetBaselineGetDefinitionOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBaselineGetDefinitionOKBody) validateData(formats strfmt.Registry) error {
	if swag.IsZero(o.Data) { // not required
		return nil
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBaselineGetDefinitionOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBaselineGetDefinitionOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get baseline get definition o k body based on the context it is used
func (o *GetBaselineGetDefinitionOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetBaselineGetDefinitionOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if swag.IsZero(o.Data) { // not required
			return nil
		}

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getBaselineGetDefinitionOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getBaselineGetDefinitionOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetBaselineGetDefinitionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetBaselineGetDefinitionOKBody) UnmarshalBinary(b []byte) error {
	var res GetBaselineGetDefinitionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
