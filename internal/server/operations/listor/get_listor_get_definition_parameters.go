// Code generated by go-swagger; DO NOT EDIT.

package listor

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewGetListorGetDefinitionParams creates a new GetListorGetDefinitionParams object
// with the default values initialized.
func NewGetListorGetDefinitionParams() GetListorGetDefinitionParams {

	var (
		// initialize parameters with default values

		withHashDefault = bool(false)
		withYamlDefault = bool(false)
	)

	return GetListorGetDefinitionParams{
		WithHash: &withHashDefault,

		WithYaml: &withYamlDefault,
	}
}

// GetListorGetDefinitionParams contains all the bound params for the get listor get definition operation
// typically these are obtained from a http.Request
//
// swagger:parameters GetListorGetDefinition
type GetListorGetDefinitionParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Id of Listor
	  Required: true
	  In: query
	*/
	ID int64
	/*Include hash of definition
	  In: query
	  Default: false
	*/
	WithHash *bool
	/*Include yaml of definition
	  In: query
	  Default: false
	*/
	WithYaml *bool
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGetListorGetDefinitionParams() beforehand.
func (o *GetListorGetDefinitionParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qID, qhkID, _ := qs.GetOK("id")
	if err := o.bindID(qID, qhkID, route.Formats); err != nil {
		res = append(res, err)
	}

	qWithHash, qhkWithHash, _ := qs.GetOK("with_hash")
	if err := o.bindWithHash(qWithHash, qhkWithHash, route.Formats); err != nil {
		res = append(res, err)
	}

	qWithYaml, qhkWithYaml, _ := qs.GetOK("with_yaml")
	if err := o.bindWithYaml(qWithYaml, qhkWithYaml, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindID binds and validates parameter ID from query.
func (o *GetListorGetDefinitionParams) bindID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("id", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("id", "query", raw); err != nil {
		return err
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("id", "query", "int64", raw)
	}
	o.ID = value

	return nil
}

// bindWithHash binds and validates parameter WithHash from query.
func (o *GetListorGetDefinitionParams) bindWithHash(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetListorGetDefinitionParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("with_hash", "query", "bool", raw)
	}
	o.WithHash = &value

	return nil
}

// bindWithYaml binds and validates parameter WithYaml from query.
func (o *GetListorGetDefinitionParams) bindWithYaml(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewGetListorGetDefinitionParams()
		return nil
	}

	value, err := swag.ConvertBool(raw)
	if err != nil {
		return errors.InvalidType("with_yaml", "query", "bool", raw)
	}
	o.WithYaml = &value

	return nil
}
